import re
from web_demo import db
from web_demo import app
import os, sys
import uuid
import datetime
from cassandra.cqlengine.usertype import UserType
from cassandra.cqlengine import ValidationError
from flask.ext.login import LoginManager, UserMixin, login_user, login_required, logout_user,current_user


class address(UserType):
    street = db.columns.Text()
    landmark = db.columns.Text()
    state = db.columns.Text()
    country = db.columns.Text()
    zipcode = db.columns.Integer(required=True)

class Users(db.Model, UserMixin):
    email = db.columns.Text(primary_key=True,required=True)
    username = db.columns.Text(primary_key=True,required=True)
    id = db.columns.Text(required=True)
    firstname = db.columns.Text(required=True)
    lastname = db.columns.Text(required=True)
    contact = db.columns.Set(db.columns.VarInt())
    age = db.columns.Integer()
    gender = db.columns.Text()
    uaddress = db.columns.UserDefinedType(address)
    joined = db.columns.Date(primary_key=True, default=datetime.datetime.now().date(), required=True)
    pimage = db.columns.Text()
    description = db.columns.Text()

    def validate(self):
        super(Users, self).validate()
        alloweddomain = ['gmail.com', 'outlook.com', 'yahoo.com']
        if self.email.split('@')[1] not in alloweddomain:
            raise ValidationError('no such email domain allowed')

class Listedit(db.Model):
    username = db.columns.Text(partition_key=True, required=True)
    propid = db.columns.UUID(required=True)
    district = db.columns.Text(required=True)
    zipcode = db.columns.Integer(required=True)
    price = db.columns.Double(required=True)

class Roomads(db.Model):
    district = db.columns.Text(partition_key=True, required=True)
    pricemonth = db.columns.Double(primary_key=True, clustering_order="ASC", required=True)
    propid = db.columns.UUID(primary_key=True, required=True, default=uuid.uuid4())
    posted = db.columns.DateTime(default=datetime.datetime.now(), required=True)
    posteddate = db.columns.Date(primary_key=True, clustering_order="DESC")
    minlease = db.columns.Integer(primary_key=True, required=True)
    zipcode = db.columns.Integer(partition_key=True, required=True)
    socialid = db.columns.Text(required=True)
    locality = db.columns.Text()
    street = db.columns.Text()
    fulladdress = db.columns.Text()
    state = db.columns.Text()
    country = db.columns.Text()
    lat = db.columns.Double()
    lng = db.columns.Double()
    numbath = db.columns.Integer()
    availability = db.columns.Date(default=datetime.datetime.now().date(), required=True)
    description = db.columns.Text()
    distancefromwork = db.columns.Integer()
    aboutme = db.columns.List(db.columns.Text())
    profession = db.columns.Text()
    numbed = db.columns.Integer()
    furnishtype = db.columns.Text()
    numtenant = db.columns.Integer()
    numbath = db.columns.Integer()
    amenities = db.columns.List(db.columns.Text())
    preference = db.columns.List(db.columns.Text())
    images = db.columns.List(db.columns.Text())

class Propertyrent(db.Model):
    district = db.columns.Text(partition_key=True, required=True)
    rent = db.columns.Double(primary_key=True, clustering_order="ASC", required=True)
    propid = db.columns.UUID(primary_key=True, default=uuid.uuid4())
    zipcode = db.columns.Integer(partition_key=True, required=True)
    socialid = db.columns.Text(required=True)
    locality = db.columns.Text()
    street = db.columns.Text()
    fulladdress = db.columns.Text()
    state = db.columns.Text()
    country = db.columns.Text()
    lat = db.columns.Double()
    lng = db.columns.Double()
    rtype = db.columns.Text(primary_key=True, required=True)
    ptype = db.columns.Text()
    lease = db.columns.List(db.columns.Integer())
    floorsize = db.columns.Integer()
    ownership = db.columns.Text()
    completion = db.columns.Integer()
    numtenant = db.columns.Integer()
    numbed = db.columns.Integer()
    numbath = db.columns.Integer()
    description = db.columns.Text()
    placedescription = db.columns.Text()
    posteddate = db.columns.DateTime(primary_key=True, default=datetime.datetime.now().date(), clustering_order="DESC", required=True)
    posted = db.columns.DateTime(default=datetime.datetime.now(), required=True)
    availability = db.columns.Date(default=datetime.datetime.now().date(), required=True)
    possesion = db.columns.Text()
    furnishtype = db.columns.Text()
    preference = db.columns.List(db.columns.Text())
    amenities = db.columns.List(db.columns.Text())
    outdooramenities = db.columns.List(db.columns.Text())
    specialamenities = db.columns.List(db.columns.Text())
    rentrules = db.columns.List(db.columns.Text())
    images = db.columns.List(db.columns.Text())

class PropertyMate(db.Model):
    uid = db.columns.UUID(primary_key=True, default=uuid.uuid4)
    location = db.columns.UserDefinedType(address)
    zipcode = db.columns.Integer(primary_key=True, required=True)
    mtype = db.columns.Text(primary_key=True, required=True)
    lease = db.columns.Text()
    rent = db.columns.Double(primary_key=True, required=True)
    floorsize = db.columns.Integer()
    ptenant = db.columns.Text()
    ownership = db.columns.Text()
    completion = db.columns.Integer()
    description = db.columns.Text()
    posted = db.columns.DateTime(primary_key=True, default=datetime.datetime.now(), required=True)
    possesion = db.columns.Text()
    watersupply = db.columns.Text()
    floor = db.columns.Integer()
    furnishing = db.columns.Boolean()
    cooking = db.columns.Boolean()
    ac = db.columns.Boolean()
    frige = db.columns.Boolean()
    powerbackup = db.columns.Boolean()
    carpark = db.columns.Boolean()
    swimmingpool = db.columns.Boolean()
    oamenities = db.columns.List(db.columns.Text())
    images = db.columns.List(db.columns.Text())

class PGHostel(db.Model):
    district = db.columns.Text(primary_key=True, required=True)
    rent = db.columns.Double(primary_key=True, required=True)
    propid = db.columns.UUID(primary_key=True, default=uuid.uuid4())
    zipcode = db.columns.Integer(primary_key=True, required=True)
    locality = db.columns.Text()
    street = db.columns.Text()
    fulladdress = db.columns.Text()
    state = db.columns.Text()
    country = db.columns.Text()
    lat = db.columns.Double()
    lng = db.columns.Double()
    pgtype = db.columns.Text(primary_key=True, required=True)
    lease = db.columns.Text()
    rent = db.columns.Double(primary_key=True, required=True)
    sdeposit = db.columns.Integer()
    ptenant = db.columns.Text()
    ruleintime = db.columns.Time()
    description = db.columns.Text()
    posted = db.columns.DateTime(primary_key=True, default=datetime.datetime.now(), required=True)
    availability = db.columns.Date(default=datetime.datetime.now().date(), required=True)
    possesion = db.columns.Text()
    watersupply = db.columns.Text()
    floor = db.columns.Integer()
    amenities = db.columns.List(db.columns.Text())
    outdooramenities = db.columns.List(db.columns.Text())
    specialamenities = db.columns.List(db.columns.Text())
    images = db.columns.List(db.columns.Text())

class Temporoom(db.Model):
    district = db.columns.Text(partition_key=True, required=True)
    baseprice = db.columns.Double(primary_key=True, clustering_order="ASC",required=True)
    propid = db.columns.UUID(primary_key=True, default=uuid.uuid4())
    pricerange = db.columns.List(db.columns.Integer())
    currency = db.columns.Text()
    minstay = db.columns.Integer(primary_key=True, required=True)
    maxstay = db.columns.Integer()
    zipcode = db.columns.Integer(partition_key=True, required=True)
    rtype = db.columns.Text(primary_key=True, required=True)
    ptype = db.columns.Text()
    furnishtype = db.columns.Text()
    posteddate = db.columns.Date(primary_key=True, clustering_order="DESC")
    posted = db.columns.DateTime(default=datetime.datetime.now(), required=True)
    socialid = db.columns.Text(required=True)
    securitydeposit = db.columns.Integer()
    locality = db.columns.Text()
    street = db.columns.Text()
    fulladdress = db.columns.Text()
    state = db.columns.Text()
    country = db.columns.Text()
    lat = db.columns.Double()
    lng = db.columns.Double()
    weeklydiscount = db.columns.Float()
    monthlydiscount = db.columns.Float()
    cancellation = db.columns.Text()
    howguestbook = db.columns.Text()
    cleaningfee = db.columns.Integer()
    checkin = db.columns.Time()
    checkout = db.columns.Time()
    unavailabledates = db.columns.List(db.columns.Date())
    amenities = db.columns.List(db.columns.Text())
    outdooramenities = db.columns.List(db.columns.Text())
    specialamenities = db.columns.List(db.columns.Text())
    preference = db.columns.List(db.columns.Text())
    hostfrequency = db.columns.Text()
    guestfrequency = db.columns.Text()
    preptime = db.columns.Text()
    advancenotice = db.columns.Text()
    bookingwindow = db.columns.Text()
    numbed = db.columns.Integer()
    numbath = db.columns.Integer()
    accomodates = db.columns.Integer()
    placedescription = db.columns.List(db.columns.Text())
    houserules = db.columns.List(db.columns.Text())
    ruleintime = db.columns.Time()
    description = db.columns.Text()
    images = db.columns.List(db.columns.Text())

class Review(db.Model):
    uid = db.columns.UUID(primary_key=True, default=uuid.uuid4)
    propuid = db.columns.UUID()
    review = db.columns.Text()
    rating = db.columns.Integer()
    user = db.columns.Text()
    email = db.columns.Text(primary_key=True)
    posted = db.columns.DateTime(primary_key=True, default=datetime.datetime.now, required=True)

class PropertySale(db.Model):
    district = db.columns.Text(primary_key=True, required=True)
    price = db.columns.Double(primary_key=True, required=True)
    zipcode = db.columns.Integer(primary_key=True, required=True)
    rtype = db.columns.Text(primary_key=True, required=True)
    posted = db.columns.DateTime(primary_key=True, default=datetime.datetime.now(), required=True)
    uid = db.columns.UUID(primary_key=True, default=uuid.uuid4())
    locality = db.columns.Text()
    street = db.columns.Text()
    fulladdress = db.columns.Text()
    state = db.columns.Text()
    country = db.columns.Text()
    lat = db.columns.Double()
    lng = db.columns.Double()
    stype = db.columns.Text(primary_key=True, required=True)
    nbath = db.columns.Integer()
    cost = db.columns.Double(primary_key=True, required=True)
    floorsize = db.columns.Integer()
    completion = db.columns.Integer()
    ownership = db.columns.Text()
    description = db.columns.Text()
    posted = db.columns.DateTime(primary_key=True, default=datetime.datetime.now, required=True)
    nflats = db.columns.Integer()
    watersupply = db.columns.Text()
    floor = db.columns.Integer()
    facing = db.columns.Text()
    flooring = db.columns.Text()
    furnishing = db.columns.Boolean()
    amenities = db.columns.List(db.columns.Text())
    outdooramenities = db.columns.List(db.columns.Text())
    specialamenities = db.columns.List(db.columns.Text())
    images = db.columns.List(db.columns.Text())
